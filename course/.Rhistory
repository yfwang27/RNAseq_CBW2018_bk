suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(regioneR))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library('DESeq2'))
workwd<-"/Volumes/bioinfomatics$/yfwang/Tien-Chi/RNAseq/repeatCount_unique_mul_FixedtransID"
setwd(workwd)
# information from RepEnrich for the rep annotation
#bedtemp<-read.delim("/Volumes/bioinfomatics$/yfwang/RepEnrich/data/mm9/mm9_ucsc_filtered_repeatmasker_fix.bed",header=F)
#colnames(bedtemp)[c(1:3)]<-c("chr","start","end")
#repmask_bed<-makeGRangesFromDataFrame(bedtemp,starts.in.df.are.0based=T,keep.extra.columns=T)
#repAnno<-as.data.frame(mcols(repmask_bed))
#colnames(repAnno)<-c("sub_family","class","family")
#repAnno$fullname<-paste(repAnno$class,repAnno$family,repAnno$sub_family,sep="_")
#repAnno<-repAnno[!duplicated(repAnno$fullname),]
#save(repAnno,file="repAnno.RData")
load("repAnno.RData")
# read in the gtf information
#file_rep_mm9<-"/Volumes/bioinfomatics$/yfwang/RepEnrich/data/mm9/mm9_ucsc_filtered_repeatmasker_transNamefixed.gtf"
#RepAnno_mm9<-import.gff(file_rep_mm9,format="gtf")
#save(RepAnno_mm9,file="RepAnno_mm9.RData")
load("RepAnno_mm9.RData")
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library("gplots"))
suppressPackageStartupMessages(library("edgeR"))
suppressPackageStartupMessages(library("rtracklayer"))
suppressPackageStartupMessages(library(prettydoc))
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(reshape2))
suppressPackageStartupMessages(library(regioneR))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library('DESeq2'))
workwd<-"/Volumes/bioinfomatics$/yfwang/Tien-Chi/RNAseq/repeatCount_unique_mul_FixedtransID"
setwd(workwd)
# information from RepEnrich for the rep annotation
#bedtemp<-read.delim("/Volumes/bioinfomatics$/yfwang/RepEnrich/data/mm9/mm9_ucsc_filtered_repeatmasker_fix.bed",header=F)
#colnames(bedtemp)[c(1:3)]<-c("chr","start","end")
#repmask_bed<-makeGRangesFromDataFrame(bedtemp,starts.in.df.are.0based=T,keep.extra.columns=T)
#repAnno<-as.data.frame(mcols(repmask_bed))
#colnames(repAnno)<-c("sub_family","class","family")
#repAnno$fullname<-paste(repAnno$class,repAnno$family,repAnno$sub_family,sep="_")
#repAnno<-repAnno[!duplicated(repAnno$fullname),]
#save(repAnno,file="repAnno.RData")
load("repAnno.RData")
# read in the gtf information
#file_rep_mm9<-"/Volumes/bioinfomatics$/yfwang/RepEnrich/data/mm9/mm9_ucsc_filtered_repeatmasker_transNamefixed.gtf"
#RepAnno_mm9<-import.gff(file_rep_mm9,format="gtf")
#save(RepAnno_mm9,file="RepAnno_mm9.RData")
load("RepAnno_mm9.RData")
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#RepAnno_mm9
suppressPackageStartupMessages(library(plyr))
RepAnno_mm9_df<-toDataframe(RepAnno_mm9)
RepAnno_mm9_df$gene_id<-make.names(RepAnno_mm9_df$gene_id)
RepAnno_mm9_df$length<-width(RepAnno_mm9)
RepAnno_mm9_CopyNumberInfo<-as.data.frame(table(RepAnno_mm9_df$gene_id))
#RepAnno_mm9_CopyNumberInfo$Var1<-gsub("\\(","_",RepAnno_mm9_CopyNumberInfo$Var1)
#RepAnno_mm9_CopyNumberInfo$Var1<-gsub("\\)","_",RepAnno_mm9_CopyNumberInfo$Var1)
RepAnno_mm9_CopyNumberInfo$Var1<-make.names(RepAnno_mm9_CopyNumberInfo$Var1)
repAnno$sub_family<-make.names(repAnno$sub_family)
RepAnno_mm9_CopyNumberInfo_full<-merge(RepAnno_mm9_CopyNumberInfo,repAnno,by.x=1,by.y=1)
#haha1<-RepAnno_mm9_CopyNumberInfo[!(RepAnno_mm9_CopyNumberInfo$Var1 %in% repAnno$sub_family),]
#haha2<-repAnno[!(repAnno$sub_family %in% RepAnno_mm9_CopyNumberInfo$Var1 ),]
RepAnno_mm9_CopyNumberInfo_full<-RepAnno_mm9_CopyNumberInfo_full[,c(3,4,1,2,5)]
colnames(RepAnno_mm9_CopyNumberInfo_full)[c(3,4)]<-c("sub_family","CopyNumber")
RepAnno_mm9_df<-RepAnno_mm9_df[,-c(4:7)]
RepAnno_element2geneid<-RepAnno_mm9_df[,c(4,5)]
RepAnno_element2geneid<-RepAnno_element2geneid[!duplicated(RepAnno_element2geneid$transcript_id),]
rep_element_length_infoSum<-as.data.frame(tapply(RepAnno_mm9_df$length, RepAnno_mm9_df$gene_id, FUN=sum))
rep_element_length_infoSum$sub_family<-rownames(rep_element_length_infoSum)
colnames(rep_element_length_infoSum)[1]<-"length"
rep_element_length_infoSum$sub_family<-make.names(rep_element_length_infoSum$sub_family)
#RepAnno_mm9_CopyNumberInfo_full<-merge(RepAnno_mm9_CopyNumberInfo_full,rep_element_length_infoSum,by.x=3,by.y=2)
#RepAnno_mm9_CopyNumberInfo_full<-RepAnno_mm9_CopyNumberInfo_full[,c(2,3,1,4,5)]
RepAnno_mm9_CopyNumberInfo_less100<-RepAnno_mm9_CopyNumberInfo_full[RepAnno_mm9_CopyNumberInfo_full$class=="LTR" &
RepAnno_mm9_CopyNumberInfo_full$CopyNumber<100,]
RepAnno_mm9_CopyNumberInfo_less100<-RepAnno_mm9_CopyNumberInfo_less100[order(RepAnno_mm9_CopyNumberInfo_less100$CopyNumber,
decreasing = T),]
RepAnno_mm9_CopyNumberInfo_more100<-RepAnno_mm9_CopyNumberInfo_full[!(RepAnno_mm9_CopyNumberInfo_full$fullname %in%
RepAnno_mm9_CopyNumberInfo_less100$fullname),]
datatable(RepAnno_mm9_CopyNumberInfo_full,escape = F,rownames = FALSE,
filter = 'top', options = list(  autoWidth = TRUE, orderMulti=T))
# using the RepEnrich result to define up-regulated TE with FDR <0.05 and FC>0
repenrich_res<-read.csv("edgeR/allCP_mm9_F_KO_Minus_F_WT_edgeR.csv")
up_TEf<-repenrich_res[repenrich_res$FDR<0.1 & repenrich_res$logFC>0,]
unique_repelement<-make.names(unique(up_TEf$sub_family))
dfup_TE<-up_TEf[,c(1,6,7)]
datatable(dfup_TE, caption = "up-regulated TE in female", rownames = F, filter='top')
repenrich_res2<-read.csv("edgeR/allCP_mm9_M_KO_Minus_M_WT_edgeR.csv")
up_TEm<-repenrich_res2[repenrich_res2$FDR<0.1 & repenrich_res2$logFC>0,]
unique_repelement2<-make.names(unique(up_TEm$sub_family))
dfup_TEm<-up_TEm[,c(1,6,7)]
datatable(dfup_TEm, caption = "up-regulated TE in male", rownames = F, filter='top')
commTE<-dfup_TE[dfup_TE$sub_family %in% dfup_TEm$sub_family,]
sp4female<-dfup_TE[!(dfup_TE$sub_family %in% dfup_TEm$sub_family),]
sp4male<-dfup_TEm[!(dfup_TEm$sub_family %in% dfup_TE$sub_family),]
sp4female_cp<-merge(sp4female,RepAnno_mm9_CopyNumberInfo_full[,-c(1,2)],by.x='sub_family',by.y='sub_family')
sp4male_cp<-merge(sp4male,RepAnno_mm9_CopyNumberInfo_full[,-c(1,2)],by.x='sub_family',by.y='sub_family')
datatable(sp4female_cp, caption = "up-regulated female-specific TE", rownames = F, filter='top')
datatable(sp4male_cp, caption = "up-regulated male-specific TE", rownames = F, filter='top')
# read in the uniquely count data for each CP
load("all_CP_UniMap_Count_df.RData")
class(all_CP_UniMap_Count_df)
dim(all_CP_UniMap_Count_df)
head(all_CP_UniMap_Count_df)
countokCP<-all_CP_UniMap_Count_df[rowCounts(all_CP_UniMap_Count_df)>0,]
class(all_CP_UniMap_Count_df)
?rowCounts
countokCP<-all_CP_UniMap_Count_df[rowCounts(as.matrix(all_CP_UniMap_Count_df))>0,]
dim(countokCP)
head(countokCP)
?cpm
keep <- rowSums(cpm(countokCP)>0.5) >= 2
countokCP.keep <- countokCP[keep, ]
dim(countokCP.keep)
head(countokCP.keep)
countokCP<-all_CP_UniMap_Count_df[rowSums(as.matrix(all_CP_UniMap_Count_df))>0,]
dim(countokCP)
keep <- rowSums(cpm(countokCP)>0.5) >= 2
countokCP.keep <- countokCP[keep, ]
dim(countokCP.keep)
head(countokCP.keep)
head(sp4female_cp)
head(RepAnno_element2geneid)
head(sp4female_cp)
# rep element and each cp name
# RepAnno_element2geneid
RepAnno_4DETE<-RepAnno_element2geneid[RepAnno_element2geneid$gene_id %in% sp4female_cp$sub_family,]
dim(RepAnno_4DETE)
head(RepAnno_4DETE)
unique(RepAnno_4DETE$gene_id)
unique(sp4female_cp$sub_family)
# rep element and each cp name
# RepAnno_element2geneid
RepAnno_4DETE<-RepAnno_element2geneid[(RepAnno_element2geneid$gene_id %in% sp4female_cp$sub_family) |
(RepAnno_element2geneid$gene_id %in% sp4male_cp$sub_family),]
dim(RepAnno_4DETE)
head(RepAnno_4DETE)
head(countokCP.keep)
RepAnno_4DETE.keep<-RepAnno_4DETE[RepAnno_4DETE$transcript_id %in% rownames(countokCP.keep),]
dim(RepAnno_4DETE)
dim(RepAnno_4DETE.keep)
head(RepAnno_4DETE.keep)
RepAnno_mm9
head(RepAnno_4DETE.keep)
RepAnno_mm9.DETE.keep<-RepAnno_mm9[RepAnno_mm9$transcript_id %in% RepAnno_4DETE.keep$transcript_id,]
RepAnno_mm9.DETE.keep
length(RepAnno_mm9.DETE.keep)
# bed file for female
DETElist<-list()
names(DETElist)<-c("female_specific_UpTE","male_specific_UpTE")
# bed file for female
DETElist<-list()
DETElist[[1]]<-sp4female_cp;DETElist[[2]]<-sp4male_cp
names(DETElist)<-c("female_specific_UpTE","male_specific_UpTE")
i=1
indlist<-DETElist[[i]]
showdename<-names(DETElist)[i]
head(indlist)
k=1
indTE<-showuniTE[k]
indlist<-DETElist[[i]]
showdename<-names(DETElist)[i]
showuniTE<-unique(indlist$sub_family)
indTE<-showuniTE[k]
indTE
RepAnno_mm9.DETE.keep
subRepAnnogr<-RepAnno_mm9.DETE.keep[RepAnno_mm9.DETE.keep$gene_id==indTE,]
subRepAnnogr
indlist
subRepAnnogr
tempdf<-data.frame(chr=seqnames(subRepAnnogr),start=start(subRepAnnogr)-1,end=end(subRepAnnogr),
unipeakid=subRepAnnogr$transcript_id,c5=0,strand=strand(subRepAnnogr))
head(tempdf)
?flank
23789545-23789161
summary(width(subRepAnnogr))
subRepAnnogr
subRepAnnogr_1<-promoters(subRepAnnogr,upstream = 500,downstream = 50)
subRepAnnogr_1
23789545-500
23789162-23789496
109423287-500
109423287+50
23789545+500
23789545-50
indlist<-DETElist[[i]]
showdename<-names(DETElist)[i]
showuniTE<-unique(indlist$sub_family)
oribed<-NULL
promoterbed<-NULL
for (k in 1:length(showuniTE)){
indTE<-showuniTE[k]
subRepAnnogr<-RepAnno_mm9.DETE.keep[RepAnno_mm9.DETE.keep$gene_id==indTE,]
subRepAnnogr_1<-promoters(subRepAnnogr,upstream = 500,downstream = 50)
tempdf<-data.frame(chr=seqnames(subRepAnnogr),start=start(subRepAnnogr)-1,end=end(subRepAnnogr),
unipeakid=subRepAnnogr$transcript_id,c5=0,strand=strand(subRepAnnogr))
oribed<-rbind(oribed,tempdf)
tempdf_1<-data.frame(chr=seqnames(subRepAnnogr_1),start=start(subRepAnnogr_1)-1,end=end(subRepAnnogr_1),
unipeakid=subRepAnnogr_1$transcript_id,c5=0,strand=strand(subRepAnnogr_1))
promoterbed<-rbind(promoterbed,tempdf_1)
}
tempdf
indlist<-DETElist[[i]]
showdename<-names(DETElist)[i]
showuniTE<-unique(indlist$sub_family)
oribed<-NULL
promoterbed<-NULL
k=1
indTE<-showuniTE[k]
subRepAnnogr<-RepAnno_mm9.DETE.keep[RepAnno_mm9.DETE.keep$gene_id==indTE,]
subRepAnnogr_1<-promoters(subRepAnnogr,upstream = 500,downstream = 50)
tempdf<-data.frame(chr=seqnames(subRepAnnogr),start=start(subRepAnnogr)-1,end=end(subRepAnnogr),
unipeakid=subRepAnnogr$transcript_id,c5=0,strand=strand(subRepAnnogr))
oribed<-rbind(oribed,tempdf)
tempdf_1<-data.frame(chr=seqnames(subRepAnnogr_1),start=start(subRepAnnogr_1)-1,end=end(subRepAnnogr_1),
unipeakid=subRepAnnogr_1$transcript_id,c5=0,strand=strand(subRepAnnogr_1))
promoterbed<-rbind(promoterbed,tempdf_1)
k=2
indTE<-showuniTE[k]
subRepAnnogr<-RepAnno_mm9.DETE.keep[RepAnno_mm9.DETE.keep$gene_id==indTE,]
subRepAnnogr_1<-promoters(subRepAnnogr,upstream = 500,downstream = 50)
tempdf<-data.frame(chr=seqnames(subRepAnnogr),start=start(subRepAnnogr)-1,end=end(subRepAnnogr),
unipeakid=subRepAnnogr$transcript_id,c5=0,strand=strand(subRepAnnogr))
subRepAnnogr
length(subRepAnnogr)
indlist<-DETElist[[i]]
showdename<-names(DETElist)[i]
showuniTE<-unique(indlist$sub_family)
oribed<-NULL
promoterbed<-NULL
for (k in 1:length(showuniTE)){
indTE<-showuniTE[k]
subRepAnnogr<-RepAnno_mm9.DETE.keep[RepAnno_mm9.DETE.keep$gene_id==indTE,]
if (length(subRepAnnogr)>0){
subRepAnnogr_1<-promoters(subRepAnnogr,upstream = 500,downstream = 50)
tempdf<-data.frame(chr=seqnames(subRepAnnogr),start=start(subRepAnnogr)-1,end=end(subRepAnnogr),
unipeakid=subRepAnnogr$transcript_id,c5=0,strand=strand(subRepAnnogr))
oribed<-rbind(oribed,tempdf)
tempdf_1<-data.frame(chr=seqnames(subRepAnnogr_1),start=start(subRepAnnogr_1)-1,end=end(subRepAnnogr_1),
unipeakid=subRepAnnogr_1$transcript_id,c5=0,strand=strand(subRepAnnogr_1))
promoterbed<-rbind(promoterbed,tempdf_1)
}
}
dim(promoterbed)
head(promoterbed)
showdename
dir()
outfilename<-paste0("bedfiles/",showdename,"_allUpTEseq.bed")
outfilename
# bed file for female-specific and male-specific
DETElist<-list()
DETElist[[1]]<-sp4female_cp;DETElist[[2]]<-sp4male_cp
names(DETElist)<-c("female_specific_UpTE","male_specific_UpTE")
for (i in 1:length(DETElist)){
indlist<-DETElist[[i]]
showdename<-names(DETElist)[i]
showuniTE<-unique(indlist$sub_family)
oribed<-NULL
promoterbed<-NULL
for (k in 1:length(showuniTE)){
indTE<-showuniTE[k]
subRepAnnogr<-RepAnno_mm9.DETE.keep[RepAnno_mm9.DETE.keep$gene_id==indTE,]
if (length(subRepAnnogr)>0){
subRepAnnogr_1<-promoters(subRepAnnogr,upstream = 500,downstream = 50)
tempdf<-data.frame(chr=seqnames(subRepAnnogr),start=start(subRepAnnogr)-1,end=end(subRepAnnogr),
unipeakid=subRepAnnogr$transcript_id,c5=0,strand=strand(subRepAnnogr))
oribed<-rbind(oribed,tempdf)
tempdf_1<-data.frame(chr=seqnames(subRepAnnogr_1),start=start(subRepAnnogr_1)-1,end=end(subRepAnnogr_1),
unipeakid=subRepAnnogr_1$transcript_id,c5=0,strand=strand(subRepAnnogr_1))
promoterbed<-rbind(promoterbed,tempdf_1)
}
}
outfilename<-paste0("bedfiles/",showdename,"_allUpTEseq.bed")
outfilename.pro<-paste0("bedfiles/",showdename,"_allUpTEpromoter.bed")
write.table(oribed,file=outfilename,sep="\t",quote=F,col.names = F,row.names = F)
write.table(promoterbed,file=outfilename.pro,sep="\t",quote=F,col.names = F,row.names = F)
}
sp4male_cp
sp4male_cp
indlist
i=1
q=1
indlist<-DETElist[[i]]
showdename<-names(DETElist)[i]
showuniclass<-unique(indlist$class)
uniclass<-showuniclass[q]
showsubinfo<-indlist[indlist$class==uniclass,]
showsubinfo
showuniTE<-unique(showsubinfo$sub_family)
oribed<-NULL
promoterbed<-NULL
showuniTE
# bed file for female-specific and male-specific: seperate class
for (i in 1:length(DETElist)){
indlist<-DETElist[[i]]
showdename<-names(DETElist)[i]
showuniclass<-unique(indlist$class)
for (q in 1:length(showuniclass)){
uniclass<-showuniclass[q]
showsubinfo<-indlist[indlist$class==uniclass,]
showuniTE<-unique(showsubinfo$sub_family)
oribed<-NULL
promoterbed<-NULL
for (k in 1:length(showuniTE)){
indTE<-showuniTE[k]
subRepAnnogr<-RepAnno_mm9.DETE.keep[RepAnno_mm9.DETE.keep$gene_id==indTE,]
if (length(subRepAnnogr)>0){
subRepAnnogr_1<-promoters(subRepAnnogr,upstream = 500,downstream = 50)
tempdf<-data.frame(chr=seqnames(subRepAnnogr),start=start(subRepAnnogr)-1,end=end(subRepAnnogr),
unipeakid=subRepAnnogr$transcript_id,c5=0,strand=strand(subRepAnnogr))
oribed<-rbind(oribed,tempdf)
tempdf_1<-data.frame(chr=seqnames(subRepAnnogr_1),start=start(subRepAnnogr_1)-1,end=end(subRepAnnogr_1),
unipeakid=subRepAnnogr_1$transcript_id,c5=0,strand=strand(subRepAnnogr_1))
promoterbed<-rbind(promoterbed,tempdf_1)
}
}
outfilename<-paste0("bedfiles/",showdename,"_",uniclass,"_UpTEseq.bed")
outfilename.pro<-paste0("bedfiles/",showdename,"_",uniclass,"_UpTEpromoter.bed")
write.table(oribed,file=outfilename,sep="\t",quote=F,col.names = F,row.names = F)
write.table(promoterbed,file=outfilename.pro,sep="\t",quote=F,col.names = F,row.names = F)
}
}
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages(library(DT))
suppressPackageStartupMessages(library(DT))
# load library
suppressPackageStartupMessages(library(ggplot2))
# load the GSEA scores
sum_GSEA<-read.csv(file="/Users/yfwang/Downloads/GSEA_4cohesinMainFunctions_summary.csv")
col<-c("#EFCC69","#B14A37","#CD5A46","#919191")
cohesin_gsea<-sum_GSEA[sum_GSEA$MUTATION=="Cohesin",]
g <- ggplot(cohesin_gsea, aes(x=MUTATION,y=TMM.NES))+
geom_bar(aes(fill = NAME), colour="black", position = position_stack(reverse = TRUE), stat='identity',width=0.2) +
coord_flip() + scale_fill_manual(values=col,labels = c("inflammatory response",
"IFN-alpha", "IFN-gamma","TNF-NFkB")) +
theme_bw()+
theme(legend.position = "top",axis.text.y = element_blank(),legend.title=element_blank(),plot.title = element_text(hjust = 0.5))+
ylim(-15,15)+ ylab("Cumulative enrichment score")+
ggtitle("Cohesin-mutated versus non-mutated AML")
print(g)
head(cohesin_gsea)
M_gsea<-sum_GSEA[grep("^M\\d$",sum_GSEA$MUTATION),]
M_gsea[M_gsea$TMM.FDR.q.val>0.05,]$TMM.NES=0
M_gsea<-droplevels(M_gsea)
M_gsea$MUTATION<-factor(M_gsea$MUTATION,levels=rev(levels(M_gsea$MUTATION)))
g <- ggplot(M_gsea, aes(x=MUTATION,y=TMM.NES))+
geom_bar(aes(fill = NAME), colour="black", position = position_stack(reverse = TRUE), stat='identity',width=0.4) +
coord_flip() + scale_fill_manual(values=col,labels = c("inflammatory response",
"IFN-alpha", "IFN-gamma","TNF-NFkB")) +
theme_bw()+
theme(legend.position = "top",legend.title=element_blank())+
ylim(-15,15)+ ylab("Cumulative enrichment score")
print(g)
head(M_gsea)
class(M_gsea$MUTATION)
class(M_gsea$NAME)
install.packages("prettydoc")
install.packages("prettydoc")
suppressPackageStartupMessages(library(prettydoc))
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
?as.data.frame
6525585+8233858
?write.fasta
?duplicated
?read.delim
# setup working directory
workwd<-"/Volumes/bioinfomatics$/yfwang/Sergi/TE_analysis/filterted/RepEnrich/Irene_CtcfRad21KO"
setwd(workwd)
# setup working directory
workwd<-"/Volumes/bioinfomatics$/yfwang/Sergi/TE_analysis/filterted/RepEnrich/Irene_CtcfRad21KO"
setwd(workwd)
bamfiles_input<-bamfiles[grep("INPUT",names(bamfiles))]
library("ChIPQC")
allChIPinfo$Rep="1"
getwd()
library(DESeq2)
?results
?res
setwd("/Volumes/bioinfomatics$/yfwang/CBW/StatisticsR_CBW18")
library(edgeR)
library(DESeq2)
library(goseq)
library(RColorBrewer)
library(ggplot2)
library("pheatmap")
library(KEGG.db)
library(org.Mm.eg.db)
library(biomaRt)
targets <- read.table("targets.txt",sep="\t",header=TRUE)
setwd("/Volumes/bioinfomatics$/yfwang/CBW/StatisticsR_CBW18/course")
stewd("/Volumes/bioinfomatics$/yfwang/CBW/RNAseq_CBW2018/course")
setwd("/Volumes/bioinfomatics$/yfwang/CBW/RNAseq_CBW2018/course")
targets <- read.table("targets.txt",sep="\t",header=TRUE)
targets
AllCounts<-read.csv(file="AllCounts.csv",row.names = 1)
head(AllCounts)
class(AllCounts)
cData<-data.frame(name=targets$Sample,                                                                          Group=targets$Group,Batch=targets$Batch)
rownames(cData)<-cData[,1]
library(DESeq2)
dds<-DESeqDataSetFromMatrix(
countData= AllCounts,colData=cData,
design=~Group)
res<-results(dds)
library(DESeq2)
dds<-DESeqDataSetFromMatrix(
countData= AllCounts,colData=cData,
design=~Group)
dds<-DESeq(dds)
res<-results(dds)
resOrdered<-res[order(res$padj),]
?results
head(resOrdered)
library(biomaRt)
mart=useMart('ENSEMBL_MART_ENSEMBL',
dataset='mmusculus_gene_ensembl',
host="may2012.archive.ensembl.org")
bm<-getBM(attributes=c('ensembl_gene_id','mgi_symbol'),
filters ='ensembl_gene_id',
values=rownames(resOrdered), mart=mart)
# merge the Gene_symbol to our DE dataset
resAnnotated <- merge(as.data.frame(resOrdered),bm,by.x=0,by.y=1)
head(resAnnotated)
# change the column name
colnames(resAnnotated)[1]<-"ensembl_gene_id"
# Order results by adjusted p value
resAnnotated<-resAnnotated[order(resAnnotated$pvalue,decreasing=F),]
# show the result with gene symbol annotation
head(resAnnotated)
write.table(resAnnotated,file="DESeq_result.txt",sep="\t")
write.csv(resAnnotated,file="DESeq_result.csv",  row.names=F)
write.table(resAnnotated,file="DESeq_result.txt",sep="\t")
write.csv(resAnnotated,file="DESeq_result.csv",  row.names=F)
